{"mappings":"AA2CA,SAASA,EAAcC,EAAUC,GAS/B,OARgB,IAAIC,SAAQ,CAACC,EAASC,KACdC,KAAKC,SAAW,GAEpCH,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,G,CAjDlBM,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAEJ,MAAOV,MAAAW,EAAKC,KAAEA,EAAIC,OAAEA,GAAUJ,EAAIK,cAAcC,SAEhDC,YAAW,KACT,IAAIC,EAAW,EAUf,GARAnB,EAAcmB,EAAUN,EAAMO,OAC3BC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,QAAQC,IAAI,qBAAqBtB,QAAeC,MAAU,IAE3DsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBoB,QAAQG,MAAM,oBAAoBxB,QAAeC,MAAU,IAGlC,IAAzBwB,OAAOX,EAAOK,OAChB,OAGF,MAAMO,EAAaC,aAAY,KAC7BT,GAAY,EAEZnB,EAAcmB,EAAUN,EAAMO,OAC3BC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,QAAQC,IAAI,qBAAqBtB,QAAeyB,OAAOxB,GAASwB,OAAOZ,EAAKM,QAAUnB,EAAW,OAAO,IAEzGuB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBoB,QAAQG,MAAM,oBAAoBxB,QAAeyB,OAAOxB,GAASwB,OAAOZ,EAAKM,QAAUnB,EAAW,OAAO,IAE1G4B,SAAQ,KACHV,IAAaO,OAAOX,EAAOK,QAC7BU,cAAcH,EAAW,GAE3B,GACHb,EAAKM,MAAM,GACbP,EAAMO,M","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector(\".form\");\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const {delay, step, amount} = evt.currentTarget.elements;\n\n  setTimeout(() => {\n    let position = 1;\n\n    createPromise(position, delay.value)\n      .then(({ position, delay }) => {\n        console.log(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.error(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    if (Number(amount.value) === 1) {\n      return;\n    }\n\n    const intervalId = setInterval(() => {\n      position += 1;\n\n      createPromise(position, delay.value)\n        .then(({ position, delay }) => {\n          console.log(`Fulfilled promise ${position} in ${Number(delay) + Number(step.value) * (position - 1)}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.error(`Rejected promise ${position} in ${Number(delay) + Number(step.value) * (position - 1)}ms`);\n        })\n        .finally(() => {\n          if (position === Number(amount.value)) {\n            clearInterval(intervalId);\n          }\n        });\n    }, step.value);\n  }, delay.value);\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({position, delay});\n    } else {\n      reject({position, delay});\n    }\n  })\n  return promise;\n}\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","document","querySelector","addEventListener","evt","preventDefault","delay1","step","amount","currentTarget","elements","setTimeout","position1","value","then","console","log","catch","error","Number","intervalId","setInterval","finally","clearInterval"],"version":3,"file":"03-promises.64277e5f.js.map"}